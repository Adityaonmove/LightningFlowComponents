public with sharing class GoogleCalendarEvent {
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

    public GoogleCalendarEvent() {

    }

    @AuraEnabled
	public String kind {get;set;} 
    @AuraEnabled
	public String etag {get;set;} 
    @AuraEnabled
	public String id {get;set;} 
    @AuraEnabled
	public String status {get;set;} 
    @AuraEnabled
	public String htmlLink {get;set;} 
    @AuraEnabled
	public String updated {get;set;}
    @AuraEnabled 
	public GoogleDateTime start {get;set;} 
    @AuraEnabled
	public GoogleDateTime end_Z {get;set;} // in json: end
    @AuraEnabled
	public String visibility {get;set;} 
    @AuraEnabled
	public String iCalUID {get;set;} 

	/* public GoogleCalendarEvent(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'kind') {
						kind = parser.getText();
					} else if (text == 'etag') {
						etag = parser.getText();
					} else if (text == 'id') {
						id = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'htmlLink') {
						htmlLink = parser.getText();
					} else if (text == 'updated') {
						updated = parser.getText();
					} else if (text == 'start') {
						start = new Start(parser);
					} else if (text == 'end') {
						end_Z = new Start(parser);
					} else if (text == 'visibility') {
						visibility = parser.getText();
					} else if (text == 'iCalUID') {
						iCalUID = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'GoogleCalendarEvent consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Start {
		public String dateTime_Z {get;set;} // in json: dateTime
		public String timeZone {get;set;} 

		public Start(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dateTime') {
							dateTime_Z = parser.getText();
						} else if (text == 'timeZone') {
							timeZone = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Start consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    public static GoogleCalendarEvent parse2(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return  (GoogleCalendarEvent) System.JSON.deserialize(json, GoogleCalendarEvent.class);
	}
//need to create an apex type to reflect the outer response that contains the list of events

	
	public static GoogleCalendarEvent parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new GoogleCalendarEvent(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	} */
	




}
