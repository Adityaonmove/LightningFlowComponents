public with sharing class DatoramaReport {
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

	@auraEnabled 
    public Integer createUserId {get;set;} 

    @auraEnabled 
    public Long createTime {get;set;} 
	@auraEnabled 
    public Integer updateUserId {get;set;} 
	@auraEnabled 
    public Long updateTime {get;set;} 
	@auraEnabled 
    public String updateUser {get;set;} 
	@auraEnabled 
    public String createUser {get;set;} 
	@auraEnabled 
    public Object config {get;set;} 
	@auraEnabled 
    public Boolean active {get;set;} 
	@auraEnabled 
    public Boolean compressed {get;set;} 
	@auraEnabled 
    public String exportFileName {get;set;} 
	@auraEnabled 
    public Boolean includeHeaders {get;set;} 
	@auraEnabled 
    public Boolean locked {get;set;} 
	@auraEnabled 
    public Boolean runOnlyAsPartOfWorkflow {get;set;} 
	@auraEnabled 
    public Object shareWithEmails {get;set;} 
	@auraEnabled 
    public Object originalId {get;set;} 
	@auraEnabled 
    public Boolean includeUnsubscribe {get;set;} 
	@auraEnabled 
    public Boolean pgpEncrypted {get;set;} 
	@auraEnabled 
    public String pgpPassphrase {get;set;} 
	@auraEnabled 
    public String pgpPublicKey {get;set;} 
	@auraEnabled 
    public Integer id {get;set;} 
	@auraEnabled 
    public String exportFormat {get;set;} 
	@auraEnabled 
    public Boolean shared {get;set;} 
	@auraEnabled 
    public Boolean public_Z {get;set;} // in json: 
	@auraEnabled 
    public String emailBodyText {get;set;} 
	@auraEnabled 
    public Boolean customEmailBody {get;set;} 
	@auraEnabled 
    public Integer workspaceId {get;set;} 
	@auraEnabled 
    public String name {get;set;} 

	
    public DatoramaReport(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'createUserId') {
						createUserId = parser.getIntegerValue();
					} else if (text == 'createTime') {
						createTime = parser.getLongValue();
					} else if (text == 'updateUserId') {
						updateUserId = parser.getIntegerValue();
					} else if (text == 'updateTime') {
						updateTime = parser.getLongValue();
					} else if (text == 'updateUser') {
						updateUser = parser.getText();
					} else if (text == 'createUser') {
						createUser = parser.getText();
					} else if (text == 'config') {
						config = parser.readValueAs(Object.class);
					} else if (text == 'active') {
						active = parser.getBooleanValue();
					} else if (text == 'compressed') {
						compressed = parser.getBooleanValue();
					} else if (text == 'exportFileName') {
						exportFileName = parser.getText();
					} else if (text == 'includeHeaders') {
						includeHeaders = parser.getBooleanValue();
					} else if (text == 'locked') {
						locked = parser.getBooleanValue();
					} else if (text == 'runOnlyAsPartOfWorkflow') {
						runOnlyAsPartOfWorkflow = parser.getBooleanValue();
					} else if (text == 'shareWithEmails') {
						shareWithEmails = parser.readValueAs(Object.class);
					} else if (text == 'originalId') {
						originalId = parser.readValueAs(Object.class);
					} else if (text == 'includeUnsubscribe') {
						includeUnsubscribe = parser.getBooleanValue();
					} else if (text == 'pgpEncrypted') {
						pgpEncrypted = parser.getBooleanValue();
					} else if (text == 'pgpPassphrase') {
						pgpPassphrase = parser.getText();
					} else if (text == 'pgppublicKey') {
						pgppublicKey = parser.getText();
					} else if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'exportFormat') {
						exportFormat = parser.getText();
					} else if (text == 'shared') {
						shared = parser.getBooleanValue();
					} else if (text == 'public') {
    				  public_Z = parser.getBooleanValue();
					} else if (text == 'emailBodyText') {
						emailBodyText = parser.getText();
					} else if (text == 'customEmailBody') {
						customEmailBody = parser.getBooleanValue();
					} else if (text == 'workspaceId') {
						workspaceId = parser.getIntegerValue();
					} else if (text == 'name') {
						name = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'DatoramaReport consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	

    public static DatoramaReport parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DatoramaReport(parser);
	}
	

    public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






}